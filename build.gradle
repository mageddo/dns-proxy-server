buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
  }
  dependencies {
    classpath 'com.guardsquare:proguard-gradle:7.3.0'
  }
}

plugins {
  id "java"
  id 'net.researchgate.release' version '3.0.2'
  id 'com.github.johnrengelman.shadow' version '7.1.2'
  id 'org.graalvm.buildtools.native' version '0.9.19'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://oss.sonatype.org/service/local/repositories/releases/content" }
}

sourceCompatibility = JavaVersion.VERSION_19
targetCompatibility = JavaVersion.VERSION_19

dependencies {

  compileOnly('org.projectlombok:lombok:1.18.+')
  annotationProcessor('org.projectlombok:lombok:1.18.+')

  compileOnly('com.mageddo.nativeimage:reflection-config-generator:2.4.4')
  annotationProcessor('com.mageddo.nativeimage:reflection-config-generator:2.4.4')

  annotationProcessor("com.google.dagger:dagger-compiler:2.45")
  implementation("com.google.dagger:dagger:2.45")

  implementation('jakarta.enterprise:jakarta.enterprise.cdi-api:2.0.2')
  implementation('jakarta.ws.rs:jakarta.ws.rs-api:2.1.6')
  implementation('com.mageddo.commons:commons-lang:0.1.6')
  implementation('org.apache.commons:commons-exec:1.3')

  implementation('ch.qos.logback:logback-classic:1.4.5')
  implementation('net.java.dev.jna:jna:5.13.0')
  implementation('dnsjava:dnsjava:3.5.2')
  implementation('org.apache.commons:commons-compress:1.22')
  implementation('org.rauschig:jarchivelib:1.2.0')

  implementation('com.github.docker-java:docker-java-core:3.2.14')
  implementation('com.github.docker-java:docker-java-transport-httpclient5:3.2.14')

  implementation('info.picocli:picocli:4.7.1')

  testAnnotationProcessor("com.google.dagger:dagger-compiler:2.45")
  testCompileOnly('org.projectlombok:lombok:1.18.+')
  testAnnotationProcessor('org.projectlombok:lombok:1.18.+')

  testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")
  testImplementation('org.mockito:mockito-junit-jupiter:5.1.+')
  testImplementation('io.rest-assured:rest-assured:5.3.0')

}

test {
  useJUnitPlatform()
  exclude "**/*CompTest.class"
  testLogging {
    events "passed", "skipped", "failed"
  }
}

task compTest(type: Test) {
  useJUnitPlatform()
  include "**/*CompTest.class"
  failFast = true
  testLogging {
    events "passed", "skipped", "failed"
  }
}

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters'
}

compileTestJava {
  options.encoding = 'UTF-8'
}

processResources {
  filesMatching("**/application.properties") {
    expand version: java.util.Optional
      .ofNullable(System.getenv("BUILD_NUMBER"))
      .orElse(String.valueOf(project.version))
  }
}

def mainClassName = "com.mageddo.dnsproxyserver.App"
jar {
  manifest {
    attributes(
      "Main-Class": mainClassName
    )
  }
}

shadowJar {
  exclude 'com/sun/jna/platform/KeyboardUtils.class'
  exclude 'com/sun/jna/platform/WindowUtils.class'
  exclude 'com/sun/jna/platform/RasterRangesUtils.class'
  exclude 'com/sun/jna/platform/DesktopWindow.class'
  exclude 'com/sun/jna/platform/GDI32Util.class'
  mergeServiceFiles()
}

graalvmNative {
  binaries {
    main {
      javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(19)
        requiredVersion = '22.3'
        vendor = JvmVendorSpec.matching("GraalVM Community")
      }

      // Main options
      imageName = project.name
      mainClass = mainClassName
//      debug = true
      verbose = true
      fallback = false
      buildArgs.add('-J-Xmx5G')
//      buildArgs.add('--link-at-build-time')
    }
  }
}

release {
  project.ext.set("release.useAutomaticVersion", true)
  git {
    requireBranch.set("")
    pushToRemote.set('') // disabling push to remote
  }
  failOnCommitNeeded = true
  failOnPublishNeeded = false
  failOnUnversionedFiles = true
  buildTasks = []

}

// don't create tags as github-cli will do that
preTagCommit.enabled = false
createReleaseTag.enabled = false

confirmReleaseVersion {
  doLast {
    // codigo com a versao atual...
  }
}

tasks.register("updateNewVersion") {
  doLast {
    def versionPattern = "\\d+\\.\\d+\\.\\d+(?:-beta|-snapshot|-alpha)?"
    updateVersion("README.md", "/${versionPattern}/", "/${version}/")
    updateVersion("README.md", "${versionPattern}.tgz", "${version}.tgz")
  }
}
tasks["updateVersion"].finalizedBy("updateNewVersion")

def updateVersion(fileName, pattern, version) {
  println("> file=${fileName}, pattern=${pattern}, to=${version}")
  def f = file("${rootDir}/$fileName")
  def text = f.text
  f.withWriter { w ->
    w << text.replaceAll(pattern, version)
  }
}

task setVersionOnActions() {
  doLast {
    appendAppVersion(System.getenv("GITHUB_ENV"))
    appendAppVersion(System.getenv("GITHUB_OUTPUT"))
  }
}

void appendAppVersion(String f) {
  println("> writing ${project.version} to $f")
  file(f).append("APP_VERSION=${project.version}\n")
}


task('proguard', type: proguard.gradle.ProGuardTask) {

  // You should probably import a more compact ProGuard-style configuration
  // file for all static settings, but we're specifying them all here, for
  // the sake of the example.
  //configuration 'configuration.pro'
  verbose
  dontnote '**'
  dontwarn '**'
  dontobfuscate
  dontoptimize

  // Specify the input jars, output jars, and library jars.
  injars "${buildDir}/libs/dns-proxy-server-${project.version}-all.jar"
  outjars "${buildDir}/libs/dns-proxy-server-${project.version}-obf.jar"

  libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'

  // Save the obfuscation mapping to a file, so you can de-obfuscate any stack
  // traces later on. Keep a fixed source file attribute and all line number
  // tables to get line numbers in the stack traces.
  // You can comment this out if you're not interested in stack traces.
  printmapping 'out.map'
  renamesourcefileattribute 'SourceFile'
  keepattributes 'SourceFile,LineNumberTable'

  // Preserve all annotations.
  keepattributes '*Annotation*'

  // You can print out the seeds that are matching the keep options below.
  //printseeds 'out.seeds'

  // Preserve all public applications.
  keepclasseswithmembers 'public class * { \
        public static void main(java.lang.String[]); \
    }'

  // Preserve all native method names and the names of their classes.
  keepclasseswithmembernames includedescriptorclasses: true, 'class * { \
        native <methods>; \
    }'

  // Preserve the special static methods that are required in all enumeration
  // classes.
  keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

  // Explicitly preserve all serialization members. The Serializable interface
  // is only a marker interface, so it wouldn't save them.
  // You can comment this out if your application doesn't use serialization.
  // If your code contains serializable classes that have to be backward
  // compatible, please refer to the manual.
  keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

  // https://stackoverflow.com/a/41064207/2979435
  keep 'class !com.sun.jna.Native** { *; }'

}
