buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
  }
}

plugins {
  id "java"
  id 'io.quarkus'
  id 'net.researchgate.release' version '3.0.2'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://oss.sonatype.org/service/local/repositories/releases/content" }
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations.all {
  resolutionStrategy {
    force 'net.java.dev.jna:jna:5.13.0'
    force 'org.mockito:mockito-core:5.1.1'
  }
}

dependencies {

  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.+'
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.+'

  implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

  compileOnly group: 'com.mageddo.nativeimage', name: 'reflection-config-generator', version: '2.4.3'
  annotationProcessor group: 'com.mageddo.nativeimage', name: 'reflection-config-generator', version: '2.4.3'

  implementation 'io.quarkus:quarkus-arc'
  implementation 'io.quarkus:quarkus-resteasy'
  implementation 'io.quarkus:quarkus-resteasy-jsonb'

  implementation group: 'dnsjava', name: 'dnsjava', version: '3.5.2'

  implementation group: 'com.github.docker-java', name: 'docker-java-core', version: '3.2.14'
  implementation group: 'com.github.docker-java', name: 'docker-java-transport-httpclient5', version: '3.2.14'

  implementation group: 'info.picocli', name: 'picocli', version: '4.7.1'

  implementation 'com.mageddo.commons:commons-lang:0.1.6'
  implementation 'org.apache.commons:commons-exec:1.3'

  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.+'
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.+'
  testImplementation 'io.quarkus:quarkus-junit5'
  testImplementation("io.quarkus:quarkus-junit5-mockito")
  testImplementation 'io.rest-assured:rest-assured'
  testImplementation(group: "org.mockito", name: "mockito-junit-jupiter", version: "5.1.+")

}

test {
  systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters'
}

compileTestJava {
  options.encoding = 'UTF-8'
}

processResources {
  filesMatching("**/application.properties") {
    expand version: java.util.Optional
      .ofNullable(System.getenv("BUILD_NUMBER"))
      .orElse(String.valueOf(project.version))
  }
}

release {
  project.ext.set("release.useAutomaticVersion", true)
  git {
    requireBranch.set("")
    pushToRemote.set('origin')
  }
  failOnCommitNeeded = true
  failOnPublishNeeded = true
  failOnUnversionedFiles = true
  buildTasks = []
}

confirmReleaseVersion {
  doLast {
    updateVersion("README.md", project.ext.get("versionBefore"))
  }
}

def updateVersion(fileName, versionBefore) {
  println("> file=${fileName}, from=${versionBefore}, to=${version}")
  def f = file("${rootDir}/$fileName")
  def text = f.text
  f.withWriter { w ->
    w << text.replaceAll("\\d+\\.\\d+\\.\\d+", "${version}")
  }
}
